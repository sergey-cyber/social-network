{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/Massage/Massage.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DilogsContainer.jsx"],"names":["module","exports","DialogsItem","props","className","s","dialog","src","to","id","name","Massage","massage","text","maxLength50","maxLengthCreator","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","requireField","Dialogs","dialogElements","massagesPage","dialogs","map","massageElemenets","massages","dialogsItem","massageControl","formData","onSendMassageClick","dialogsMassege","compose","connect","state","isAuth","auth","dispatch","sendMassageCreator","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,eAAiB,kC,+FCYhKC,EATK,SAACC,GACjB,OACI,yBAAKC,UAAS,UAAKC,IAAEC,SACjB,yBAAKC,IAAKJ,EAAMI,MAChB,kBAAC,IAAD,CAASC,GAAI,YAAYL,EAAMM,IAAKN,EAAMO,QCCvCC,EANC,SAACR,GACb,OACI,yBAAKC,UAAWC,IAAEO,SAAUT,EAAMU,O,iCCIpCC,EAAcC,YAAiB,IAc/BC,EAAmBC,YAAW,CAChCC,KAAM,WADeD,EAZL,SAACd,GACjB,OACI,0BAAMgB,SAAYhB,EAAMiB,cACpB,kBAACC,EAAA,EAAD,CAAOC,YAAY,gBAAgBC,UAAWC,IAAUd,KAAK,iBACzDe,SAAU,CAAEC,IAAcZ,KAC9B,sDAmCGa,EAxBC,SAACxB,GAEb,IAAIyB,EAAiBzB,EAAM0B,aAAaC,QAAQC,KAAI,SAAAzB,GAAM,OAAI,kBAAC,EAAD,CAAaI,KAAMJ,EAAOI,KAAMD,GAAIH,EAAOG,GAAIF,IAAKD,EAAOC,SACrHyB,EAAmB7B,EAAM0B,aAAaI,SAASF,KAAI,SAAAnB,GAAO,OAAI,kBAAC,EAAD,CAASC,KAAMD,EAAQA,aAMzF,OACI,yBAAKR,UAAWC,IAAEyB,SACd,yBAAK1B,UAAWC,IAAE6B,aACbN,GAEL,yBAAKxB,UAAWC,IAAE4B,UACd,6BAAMD,GACN,yBAAK5B,UAAWC,IAAE8B,gBACd,kBAACnB,EAAD,CAAkBG,SAZjB,SAACiB,GACdjC,EAAMkC,mBAAmBD,EAASE,uB,uBCX3BC,sBAEXC,aAjBkB,SAACC,GACnB,MAAO,CACHZ,aAAcY,EAAMZ,aACpBa,OAAQD,EAAME,KAAKD,WAIF,SAACE,GACtB,MAAO,CACHP,mBAAoB,SAACC,GACjBM,EAASC,YAAmBP,SAQpCQ,IAHWP,CAIbZ","file":"static/js/4.aa8cd082.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1EH-X\",\"dialog\":\"Dialogs_dialog__2kzsH\",\"massages\":\"Dialogs_massages__153VG\",\"massage\":\"Dialogs_massage__33r_N\",\"massageControl\":\"Dialogs_massageControl__18cAX\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogsItem = (props) => {\r\n    return(\r\n        <div className={`${s.dialog}`}>\r\n            <img src={props.src}/>\r\n            <NavLink to={'/dialogs/'+props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Massage = (props) => {\r\n    return (\r\n        <div className={s.massage}>{props.text}</div>\r\n    )\r\n}\r\n\r\nexport default Massage;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogsItem from \"./DialogItem/DialogsItem\";\r\nimport Massage from \"./Massage/Massage\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../common/FormControls/formControls';\r\nimport { maxLengthCreator, requireField } from '../../utils/validators/validators';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst DialogsForm = (props) => {\r\n    return (\r\n        <form onSubmit = {props.handleSubmit} >\r\n            <Field placeholder='inter massage' component={Textarea} name='dialogsMassege'\r\n                validate={[ requireField, maxLength50 ]} />\r\n            <button> Send massage </button>\r\n        </form>\r\n    )\r\n}//Field Lesson 75\r\n//handleSubmit приходит из redux form и отменяет дефлтное поведение формы и не перезагружает\r\n// страницу когда сабмитим форму Lesson 75\r\n\r\nconst DialogsReduxForm = reduxForm ({  \r\n    form: 'dialogs'   //Имя формы, которое будет отображаться как объект в стэйте\r\n})(DialogsForm); //сюда вставляем форму, которую хотим обернуть в ReduxForm \r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogElements = props.massagesPage.dialogs.map(dialog => <DialogsItem name={dialog.name} id={dialog.id} src={dialog.src}/>);\r\n    let massageElemenets = props.massagesPage.massages.map(massage => <Massage text={massage.massage}/>);\r\n\r\n    const onSubmit = (formData) =>{ //в атрибут приходят все данные из формы\r\n        props.onSendMassageClick(formData.dialogsMassege);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.massages}>\r\n                <div>{massageElemenets}</div>\r\n                <div className={s.massageControl}>\r\n                    <DialogsReduxForm onSubmit={onSubmit} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {sendMassageCreator} from \"../../Redux/Dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        massagesPage: state.massagesPage, //передает в Dialogs пропсы props.massagesPage из state\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSendMassageClick: (dialogsMassege) => {\r\n            dispatch(sendMassageCreator(dialogsMassege));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose( //lesson 70, compose как конвеер, вызывает функции снизу вверх\r\n    // и в верхнюю функцию засовывает то, что вернула нижняя\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect  //Redirect урок 69 HOC\r\n)(Dialogs);\r\n\r\n\r\n"],"sourceRoot":""}