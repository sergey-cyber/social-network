{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/profileStatus/profileStatus.module.css","components/Profile/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/profileStatus/profileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","style","profileStatus","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileData","s","profileInfo","profile","fullName","aboutMe","lokingForAJob","lokingForAJobDescription","profileContacts","Object","keys","contacts","map","objKey","key","contantTitle","contactValue","isOwner","onClick","setProfileEditMode","ProfileDataForm","Contact","contact","ProfileInfo","profileEditMode","discriptionBlock","profileAva","avatarIsFetching","preloader","src","photos","large","falseAvatar","type","target","files","length","saveAvaPhoto","Post","item","massage","like","maxLength10","maxLengthCreator","MyPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","requireField","MyPosts","React","memo","console","log","postElements","profilePage","posts","post","likeCount","postsBlock","postsControl","formData","addPost","postValue","MyPostsContainer","connect","state","dispatch","addPostActionCreater","Profile","ProfileContainer","userId","this","match","params","autorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevPropps","updateUserStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.2e20fb9a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"discriptionBlock\":\"ProfileInfo_discriptionBlock__2NYWh\",\"profileAva\":\"ProfileInfo_profileAva__1QlBB\",\"preloader\":\"ProfileInfo_preloader__1ZoxE\",\"profileInfo\":\"ProfileInfo_profileInfo__2DQZo\",\"profileContacts\":\"ProfileInfo_profileContacts__2E64U\",\"instaLink\":\"ProfileInfo_instaLink__3jeIt\",\"contact\":\"ProfileInfo_contact__1Y4hX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileStatus\":\"profileStatus_profileStatus__Ois-4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2s0A1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3vZNl\",\"postsControl\":\"MyPosts_postsControl__2Ha0h\"};","import React, { useEffect, useState } from 'react';\r\nimport style from './profileStatus.module.css';\r\n\r\n\r\nconst ProfileStatus = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n    \r\n    return (\r\n        <div className={style.profileStatus}>\r\n            {!editMode ?\r\n            <div>\r\n                <b>Status:</b> <span onDoubleClick={activateEditMode} >{!props.status ? '_______' : props.status}</span>\r\n            </div>\r\n            : \r\n            <div>\r\n                <b>Status:</b> <input onChange={onStatusChange} autoFocus={true} \r\n                        onBlur={deActivateEditMode} value={status} />\r\n            </div>\r\n            }\r\n        </div>           \r\n    );\r\n}\r\n\r\nexport default ProfileStatus;","import React, { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/preloader/preloader';\r\nimport falseAvatar from '../../../assets/images/userPhoto.png';\r\nimport ProfileStatus from './profileStatus/profileStatus';\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    const [profileEditMode, setProfileEditMode] = useState(false);\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.saveAvaPhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.discriptionBlock}>\r\n                <div className={s.profileAva}>\r\n                    {props.avatarIsFetching ? <Preloader className={s.preloader} /> :\r\n                        <img src={props.profile.photos.large\r\n                            ? props.profile.photos.large\r\n                            : falseAvatar} />}\r\n                    {props.isOwner && <input type='file' onChange={onMainPhotoSelected} />}\r\n                </div>\r\n                {profileEditMode ? <ProfileDataForm profile={props.profile} isOwner={props.isOwner}\r\n                     setProfileEditMode={setProfileEditMode} />\r\n                 : <ProfileData profile={props.profile} isOwner={props.isOwner}\r\n                     setProfileEditMode={setProfileEditMode} />}       \r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ProfileData = (props) => {\r\n\r\n    const goToEditMode =() => {\r\n        props.setProfileEditMode(true);\r\n    } \r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <h3>{props.profile.fullName}</h3>\r\n            </div>\r\n\r\n            <div>\r\n                <p><b>About me:</b> {props.profile.aboutMe}</p>\r\n            </div>\r\n\r\n            <div>\r\n                <p><b>Looking for a job:</b> {props.profile.lokingForAJob ? 'yes' : 'no'}</p>\r\n            </div>\r\n            {props.profile.lokingForAJob &&\r\n                <div>\r\n                    <p><b>My Professional skils:</b> {props.profile.lokingForAJobDescription}</p>\r\n                </div>\r\n            }\r\n\r\n            <div className={s.profileContacts}>\r\n                <b>Contacts: </b> {Object.keys(props.profile.contacts).map((objKey) => {\r\n                    return <Contact key={objKey} contantTitle={objKey} contactValue={props.profile.contacts[objKey]} />\r\n                })}\r\n            </div>\r\n            {props.isOwner && <button onClick={goToEditMode}>Edit</button>}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst ProfileDataForm = (props) => {\r\n\r\n    const closeEditMode = () => {\r\n        props.setProfileEditMode(false);\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <h3>{props.profile.fullName}</h3>\r\n            </div>\r\n\r\n            <div>\r\n                <p><b>About me:</b> {props.profile.aboutMe}</p>\r\n            </div>\r\n\r\n            <div>\r\n                <p><b>Looking for a job:</b> {props.profile.lokingForAJob ? 'yes' : 'no'}</p>\r\n            </div>\r\n            {props.profile.lokingForAJob &&\r\n                <div>\r\n                    <p><b>My Professional skils:</b> {props.profile.lokingForAJobDescription}</p>\r\n                </div>\r\n            }\r\n\r\n            <div className={s.profileContacts}>\r\n                <b>Contacts: </b> {Object.keys(props.profile.contacts).map((objKey) => {\r\n                    return <Contact key={objKey} contantTitle={objKey} contactValue={props.profile.contacts[objKey]} />\r\n                })}\r\n            </div>\r\n            {props.isOwner && <button onClick={closeEditMode}>Save</button>}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst Contact = ({ contantTitle, contactValue }) => {\r\n    return <div className={s.contact}><b>{contantTitle}: </b>{contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img  src= {props.src} />\r\n                {props.massage}\r\n            <div>\r\n                <span>Like</span> {props.like}  \r\n            </div>        \r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from './../Post/Post'\r\nimport s from './MyPosts.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { requireField, maxLengthCreator } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from '../../common/FormControls/formControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst MyPostsForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='postValue' component={Textarea} \r\n                    placeholder='Enter massage' validate={[ requireField, maxLength10 ]} />\r\n            </div>\r\n            <button>Add Post</button> \r\n        </form>\r\n    )   //В validate передается массив с нужными валидаторами для этого филда \r\n}\r\n\r\nconst MyPostReduxForm = reduxForm ({  \r\n    form: 'myPosts'   //Имя формы, которое будет отображаться как объект в стэйте\r\n})(MyPostsForm); //сюда вставляем форму, которую хотим обернуть в ReduxForm \r\n\r\n\r\nconst MyPosts = React.memo((props) => { //React memo Lesson 87, компонент не перерисовывается если пропсы не меняются\r\n    console.log('RENDER')\r\n    let postElements = props.profilePage.posts.map( post => <Post massage={post.massage} like= {post.likeCount} src='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTC4jRg1btnvqAdcADoMgIw6RyQIXMOpZw-kg&usqp=CAU'/>)\r\n\r\n    let onSubmit = (formData) => {  //в onSubmit приходят все данные из формы\r\n        props.addPost(formData.postValue);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <div className={s.postsControl}>\r\n                <MyPostReduxForm onSubmit={onSubmit} />\r\n            </div>\r\n                {postElements}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreater} from \"../../../Redux/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profilePage: state.profilePage //передает в MyPost пропсы props.profilePage из state\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (postValue) => {\r\n            dispatch(addPostActionCreater(postValue));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts); //во вторых скобках указано в какую компоненту передаются пропсы и колбэки\r\n//функция connect создает контэйнерную компоненту\r\n//смотреть документацию и видео димыча про копирование объектов\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport Preloader from '../common/preloader/preloader';\r\n\r\nconst Profile = (props) => {\r\n    if(!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo profile={props.profile} \r\n                         isOwner={props.isOwner}\r\n                         avatarIsFetching={props.avatarIsFetching} \r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus} \r\n                         saveAvaPhoto={props.saveAvaPhoto} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { getUserProfile, getUserStatus, updateUserStatus, saveAvaPhoto} from '../../Redux/Profile-reducer';\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile () {\r\n        let userId = this.props.match.params.userId;\r\n        if(!userId) {\r\n            userId = this.props.autorizedUserId;\r\n            if(!userId) {\r\n                this.props.history.push('/login');  //This redirect on login ( Lesson 80 )\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {  \r\n        this.refreshProfile();\r\n    };\r\n\r\n    componentDidUpdate(prevPropps) {\r\n        if(this.props.match.params.userId != prevPropps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} status = {this.props.status} \r\n                updateStatus={this.props.updateUserStatus} \r\n                isOwner={!this.props.match.params.userId} \r\n                saveAvaPhoto ={this.props.saveAvaPhoto} /> //Если в урле нет id тогда можно отобразить инпут для смены аватарки\r\n                //! переводит isOwner в false если значения нет и в true если есть\r\n        );\r\n    }   \r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        avatarIsFetching: state.profilePage.avatarIsFetching,\r\n        status: state.profilePage.profileStatus,\r\n        autorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus, saveAvaPhoto }),\r\n    withRouter, //через withRouter считываются данные из урла(60 урок) и приходят в пропсах\r\n    //withAuthRedirect    //Redirect урок 69 запрещает попадать на страницу если не залогинен\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}